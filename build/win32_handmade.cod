; Listing generated by Microsoft (R) Optimizing Compiler Version 19.27.29112.0 

include listing.inc

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?XInputGetStateStub@@YAKKPEAU_XINPUT_STATE@@@Z	; XInputGetStateStub
PUBLIC	?XInputSetStateStub@@YAKKPEAU_XINPUT_VIBRATION@@@Z ; XInputSetStateStub
CONST	SEGMENT
$SG90438 DB	'xinput1_3.dll', 00H
	ORG $+2
$SG90440 DB	'XInputGetState', 00H
	ORG $+1
$SG90441 DB	'XInputSetState', 00H
	ORG $+1
$SG90499 DB	'WM_ACTIVEAPP', 0aH, 00H
	ORG $+2
$SG90569 DB	'HandmadeHeroWindowClass', 00H
$SG90572 DB	'HandmadeHeroWindowClass', 00H
CONST	ENDS
PUBLIC	WinMain
EXTRN	__imp_OutputDebugStringA:PROC
EXTRN	__imp_VirtualAlloc:PROC
EXTRN	__imp_VirtualFree:PROC
EXTRN	__imp_GetProcAddress:PROC
EXTRN	__imp_LoadLibraryA:PROC
EXTRN	__imp_StretchDIBits:PROC
EXTRN	__imp_TranslateMessage:PROC
EXTRN	__imp_DispatchMessageA:PROC
EXTRN	__imp_PeekMessageA:PROC
EXTRN	__imp_DefWindowProcA:PROC
EXTRN	__imp_RegisterClassA:PROC
EXTRN	__imp_CreateWindowExA:PROC
EXTRN	__imp_GetDC:PROC
EXTRN	__imp_ReleaseDC:PROC
EXTRN	__imp_BeginPaint:PROC
EXTRN	__imp_EndPaint:PROC
EXTRN	__imp_GetClientRect:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	__security_cookie:QWORD
_BSS	SEGMENT
?GlobalRunning@@3_NA DB 01H DUP (?)			; GlobalRunning
	ALIGN	4

?GlobalBackbuffer@@3Uwin32_offscreen_buffer@@A DB 048H DUP (?) ; GlobalBackbuffer
_BSS	ENDS
pdata	SEGMENT
$pdata$WinMain DD imagerel $LN40
	DD	imagerel $LN40+1196
	DD	imagerel $unwind$WinMain
$pdata$?Win32LoadXInput@@YAXXZ DD imagerel ?Win32LoadXInput@@YAXXZ
	DD	imagerel ?Win32LoadXInput@@YAXXZ+85
	DD	imagerel $unwind$?Win32LoadXInput@@YAXXZ
$pdata$?Win32GetWindowDimensions@@YA?AUwin32_window_dimensions@@PEAUHWND__@@@Z DD imagerel ?Win32GetWindowDimensions@@YA?AUwin32_window_dimensions@@PEAUHWND__@@@Z
	DD	imagerel ?Win32GetWindowDimensions@@YA?AUwin32_window_dimensions@@PEAUHWND__@@@Z+95
	DD	imagerel $unwind$?Win32GetWindowDimensions@@YA?AUwin32_window_dimensions@@PEAUHWND__@@@Z
$pdata$?RenderGradient@@YAXPEAUwin32_offscreen_buffer@@HH@Z DD imagerel ?RenderGradient@@YAXPEAUwin32_offscreen_buffer@@HH@Z
	DD	imagerel ?RenderGradient@@YAXPEAUwin32_offscreen_buffer@@HH@Z+217
	DD	imagerel $unwind$?RenderGradient@@YAXPEAUwin32_offscreen_buffer@@HH@Z
$pdata$?Win32ResizeDIBSection@@YAXPEAUwin32_offscreen_buffer@@HH@Z DD imagerel ?Win32ResizeDIBSection@@YAXPEAUwin32_offscreen_buffer@@HH@Z
	DD	imagerel ?Win32ResizeDIBSection@@YAXPEAUwin32_offscreen_buffer@@HH@Z+263
	DD	imagerel $unwind$?Win32ResizeDIBSection@@YAXPEAUwin32_offscreen_buffer@@HH@Z
$pdata$?Win32DisplayBufferInWindow@@YAXPEAUwin32_offscreen_buffer@@PEAUHDC__@@HH@Z DD imagerel ?Win32DisplayBufferInWindow@@YAXPEAUwin32_offscreen_buffer@@PEAUHDC__@@HH@Z
	DD	imagerel ?Win32DisplayBufferInWindow@@YAXPEAUwin32_offscreen_buffer@@PEAUHDC__@@HH@Z+159
	DD	imagerel $unwind$?Win32DisplayBufferInWindow@@YAXPEAUwin32_offscreen_buffer@@PEAUHDC__@@HH@Z
$pdata$?Win32MainWindowCallback@@YA_JPEAUHWND__@@I_K_J@Z DD imagerel ?Win32MainWindowCallback@@YA_JPEAUHWND__@@I_K_J@Z
	DD	imagerel ?Win32MainWindowCallback@@YA_JPEAUHWND__@@I_K_J@Z+492
	DD	imagerel $unwind$?Win32MainWindowCallback@@YA_JPEAUHWND__@@I_K_J@Z
pdata	ENDS
_DATA	SEGMENT
?XInputGetState_@@3P6AKKPEAU_XINPUT_STATE@@@ZEA DQ FLAT:?XInputGetStateStub@@YAKKPEAU_XINPUT_STATE@@@Z ; XInputGetState_
?XInputSetState_@@3P6AKKPEAU_XINPUT_VIBRATION@@@ZEA DQ FLAT:?XInputSetStateStub@@YAKKPEAU_XINPUT_VIBRATION@@@Z ; XInputSetState_
_DATA	ENDS
xdata	SEGMENT
$unwind$WinMain DD 032e19H
	DD	02c011cH
	DD	07015H
	DD	imagerel __GSHandlerCheck
	DD	0150H
$unwind$?Win32LoadXInput@@YAXXZ DD 010401H
	DD	06204H
$unwind$?Win32GetWindowDimensions@@YA?AUwin32_window_dimensions@@PEAUHWND__@@@Z DD 011819H
	DD	08209H
	DD	imagerel __GSHandlerCheck
	DD	038H
$unwind$?RenderGradient@@YAXPEAUwin32_offscreen_buffer@@HH@Z DD 011201H
	DD	04212H
$unwind$?Win32ResizeDIBSection@@YAXPEAUwin32_offscreen_buffer@@HH@Z DD 011201H
	DD	06212H
$unwind$?Win32DisplayBufferInWindow@@YAXPEAUwin32_offscreen_buffer@@PEAUHDC__@@HH@Z DD 011801H
	DD	0e218H
$unwind$?Win32MainWindowCallback@@YA_JPEAUHWND__@@I_K_J@Z DD 022c19H
	DD	019011aH
	DD	imagerel __GSHandlerCheck
	DD	0b0H
xdata	ENDS
; Function compile flags: /Odtp
; File c:\github\HMH\code\win32_handmade.cpp
_TEXT	SEGMENT
VKCode$1 = 32
tv64 = 36
wasDown$2 = 40
isDown$3 = 41
tv68 = 44
tv72 = 48
dimensions$4 = 56
Result$ = 64
$T5 = 72
DeviceContext$6 = 80
Paint$7 = 96
__$ArrayPad$ = 176
Window$ = 208
Message$ = 216
wParam$ = 224
lParam$ = 232
?Win32MainWindowCallback@@YA_JPEAUHWND__@@I_K_J@Z PROC	; Win32MainWindowCallback

; 139  : 						LPARAM lParam){

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00013	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
  0001a	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00021	48 33 c4	 xor	 rax, rsp
  00024	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 140  : 	LRESULT Result = 0;

  0002c	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR Result$[rsp], 0

; 141  : 	
; 142  : 	switch(Message){

  00035	8b 84 24 d8 00
	00 00		 mov	 eax, DWORD PTR Message$[rsp]
  0003c	89 44 24 24	 mov	 DWORD PTR tv64[rsp], eax
  00040	83 7c 24 24 1c	 cmp	 DWORD PTR tv64[rsp], 28
  00045	77 25		 ja	 SHORT $LN39@Win32MainW
  00047	83 7c 24 24 1c	 cmp	 DWORD PTR tv64[rsp], 28
  0004c	74 6b		 je	 SHORT $LN6@Win32MainW
  0004e	83 7c 24 24 02	 cmp	 DWORD PTR tv64[rsp], 2
  00053	74 4c		 je	 SHORT $LN4@Win32MainW
  00055	83 7c 24 24 0f	 cmp	 DWORD PTR tv64[rsp], 15
  0005a	0f 84 e1 00 00
	00		 je	 $LN32@Win32MainW
  00060	83 7c 24 24 10	 cmp	 DWORD PTR tv64[rsp], 16
  00065	74 46		 je	 SHORT $LN5@Win32MainW
  00067	e9 39 01 00 00	 jmp	 $LN33@Win32MainW
$LN39@Win32MainW:
  0006c	81 7c 24 24 00
	01 00 00	 cmp	 DWORD PTR tv64[rsp], 256 ; 00000100H
  00074	0f 82 2b 01 00
	00		 jb	 $LN33@Win32MainW
  0007a	81 7c 24 24 01
	01 00 00	 cmp	 DWORD PTR tv64[rsp], 257 ; 00000101H
  00082	76 47		 jbe	 SHORT $LN7@Win32MainW
  00084	81 7c 24 24 03
	01 00 00	 cmp	 DWORD PTR tv64[rsp], 259 ; 00000103H
  0008c	0f 86 13 01 00
	00		 jbe	 $LN33@Win32MainW
  00092	81 7c 24 24 05
	01 00 00	 cmp	 DWORD PTR tv64[rsp], 261 ; 00000105H
  0009a	76 2f		 jbe	 SHORT $LN7@Win32MainW
  0009c	e9 04 01 00 00	 jmp	 $LN33@Win32MainW
$LN4@Win32MainW:

; 143  : 		case WM_DESTROY:{
; 144  : 			//TODO handle with a message to the user?
; 145  : 			GlobalRunning = false;

  000a1	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?GlobalRunning@@3_NA, 0

; 146  : 		} break;

  000a8	e9 22 01 00 00	 jmp	 $LN2@Win32MainW
$LN5@Win32MainW:

; 147  : 		
; 148  : 		case WM_CLOSE:{
; 149  : 			//TODO handle this as an error - recreate window?
; 150  : 			GlobalRunning = false;

  000ad	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?GlobalRunning@@3_NA, 0

; 151  : 		} break;

  000b4	e9 16 01 00 00	 jmp	 $LN2@Win32MainW
$LN6@Win32MainW:

; 152  : 		
; 153  : 		case WM_ACTIVATEAPP:{
; 154  : 			OutputDebugStringA("WM_ACTIVEAPP\n");

  000b9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG90499
  000c0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_OutputDebugStringA

; 155  : 		} break;

  000c6	e9 04 01 00 00	 jmp	 $LN2@Win32MainW
$LN7@Win32MainW:

; 156  : 		
; 157  : 		case WM_SYSKEYDOWN:
; 158  : 		case WM_SYSKEYUP:
; 159  : 		case WM_KEYDOWN:
; 160  : 		case WM_KEYUP:{
; 161  : 			uint32 VKCode = wParam;

  000cb	8b 84 24 e0 00
	00 00		 mov	 eax, DWORD PTR wParam$[rsp]
  000d2	89 44 24 20	 mov	 DWORD PTR VKCode$1[rsp], eax

; 162  : 			bool wasDown = ((lParam & (1 << 30)) != 0);

  000d6	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR lParam$[rsp]
  000de	48 25 00 00 00
	40		 and	 rax, 1073741824		; 40000000H
  000e4	48 85 c0	 test	 rax, rax
  000e7	74 0a		 je	 SHORT $LN35@Win32MainW
  000e9	c7 44 24 2c 01
	00 00 00	 mov	 DWORD PTR tv68[rsp], 1
  000f1	eb 08		 jmp	 SHORT $LN36@Win32MainW
$LN35@Win32MainW:
  000f3	c7 44 24 2c 00
	00 00 00	 mov	 DWORD PTR tv68[rsp], 0
$LN36@Win32MainW:
  000fb	0f b6 44 24 2c	 movzx	 eax, BYTE PTR tv68[rsp]
  00100	88 44 24 28	 mov	 BYTE PTR wasDown$2[rsp], al

; 163  : 			bool isDown = ((lParam & (1 << 31)) == 0);

  00104	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR lParam$[rsp]
  0010c	48 25 00 00 00
	80		 and	 rax, -2147483648	; ffffffff80000000H
  00112	48 85 c0	 test	 rax, rax
  00115	75 0a		 jne	 SHORT $LN37@Win32MainW
  00117	c7 44 24 30 01
	00 00 00	 mov	 DWORD PTR tv72[rsp], 1
  0011f	eb 08		 jmp	 SHORT $LN38@Win32MainW
$LN37@Win32MainW:
  00121	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR tv72[rsp], 0
$LN38@Win32MainW:
  00129	0f b6 44 24 30	 movzx	 eax, BYTE PTR tv72[rsp]
  0012e	88 44 24 29	 mov	 BYTE PTR isDown$3[rsp], al

; 164  : 			if(wasDown != isDown){

  00132	0f b6 44 24 28	 movzx	 eax, BYTE PTR wasDown$2[rsp]
  00137	0f b6 4c 24 29	 movzx	 ecx, BYTE PTR isDown$3[rsp]

; 165  : 				if(VKCode == 'W'){
; 166  : 					
; 167  : 				}else if(VKCode == 'A'){
; 168  : 					
; 169  : 				}else if(VKCode == 'S'){
; 170  : 					
; 171  : 				}else if(VKCode == 'D'){
; 172  : 					
; 173  : 				}else if(VKCode == 'Q'){
; 174  : 					
; 175  : 				}else if(VKCode == 'E'){
; 176  : 					
; 177  : 				}else if(VKCode == VK_UP){
; 178  : 					
; 179  : 				}else if(VKCode == VK_LEFT){
; 180  : 					
; 181  : 				}else if(VKCode == VK_DOWN){
; 182  : 					
; 183  : 				}else if(VKCode == VK_RIGHT){
; 184  : 					
; 185  : 				}else if(VKCode == VK_ESCAPE){
; 186  : 					
; 187  : 				}else if(VKCode == VK_SPACE){
; 188  : 					
; 189  : 				}
; 190  : 			}
; 191  : 		}break;

  0013c	e9 8e 00 00 00	 jmp	 $LN2@Win32MainW
$LN32@Win32MainW:

; 192  : 		
; 193  : 		case WM_PAINT:{
; 194  : 			PAINTSTRUCT Paint;
; 195  : 			HDC DeviceContext = BeginPaint(Window, &Paint);

  00141	48 8d 54 24 60	 lea	 rdx, QWORD PTR Paint$7[rsp]
  00146	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR Window$[rsp]
  0014e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_BeginPaint
  00154	48 89 44 24 50	 mov	 QWORD PTR DeviceContext$6[rsp], rax

; 196  : 			
; 197  : 			win32_window_dimensions dimensions = Win32GetWindowDimensions(Window);

  00159	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR Window$[rsp]
  00161	e8 00 00 00 00	 call	 ?Win32GetWindowDimensions@@YA?AUwin32_window_dimensions@@PEAUHWND__@@@Z ; Win32GetWindowDimensions
  00166	48 89 44 24 48	 mov	 QWORD PTR $T5[rsp], rax
  0016b	48 8b 44 24 48	 mov	 rax, QWORD PTR $T5[rsp]
  00170	48 89 44 24 38	 mov	 QWORD PTR dimensions$4[rsp], rax

; 198  : 			Win32DisplayBufferInWindow(&GlobalBackbuffer, DeviceContext, 

  00175	44 8b 4c 24 3c	 mov	 r9d, DWORD PTR dimensions$4[rsp+4]
  0017a	44 8b 44 24 38	 mov	 r8d, DWORD PTR dimensions$4[rsp]
  0017f	48 8b 54 24 50	 mov	 rdx, QWORD PTR DeviceContext$6[rsp]
  00184	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?GlobalBackbuffer@@3Uwin32_offscreen_buffer@@A
  0018b	e8 00 00 00 00	 call	 ?Win32DisplayBufferInWindow@@YAXPEAUwin32_offscreen_buffer@@PEAUHDC__@@HH@Z ; Win32DisplayBufferInWindow

; 199  : 									   dimensions.width, dimensions.height);
; 200  : 			EndPaint(Window, &Paint);

  00190	48 8d 54 24 60	 lea	 rdx, QWORD PTR Paint$7[rsp]
  00195	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR Window$[rsp]
  0019d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_EndPaint

; 201  : 		} break;

  001a3	eb 2a		 jmp	 SHORT $LN2@Win32MainW
$LN33@Win32MainW:

; 202  : 		
; 203  : 		default:{
; 204  : 			//OutputDebugStringA("default\n");
; 205  : 			Result = DefWindowProc(Window, Message, wParam, lParam);

  001a5	4c 8b 8c 24 e8
	00 00 00	 mov	 r9, QWORD PTR lParam$[rsp]
  001ad	4c 8b 84 24 e0
	00 00 00	 mov	 r8, QWORD PTR wParam$[rsp]
  001b5	8b 94 24 d8 00
	00 00		 mov	 edx, DWORD PTR Message$[rsp]
  001bc	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR Window$[rsp]
  001c4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_DefWindowProcA
  001ca	48 89 44 24 40	 mov	 QWORD PTR Result$[rsp], rax
$LN2@Win32MainW:

; 206  : 		} break;
; 207  : 	}
; 208  : 	
; 209  : 	return(Result);

  001cf	48 8b 44 24 40	 mov	 rax, QWORD PTR Result$[rsp]

; 210  : }

  001d4	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  001dc	48 33 cc	 xor	 rcx, rsp
  001df	e8 00 00 00 00	 call	 __security_check_cookie
  001e4	48 81 c4 c8 00
	00 00		 add	 rsp, 200		; 000000c8H
  001eb	c3		 ret	 0
?Win32MainWindowCallback@@YA_JPEAUHWND__@@I_K_J@Z ENDP	; Win32MainWindowCallback
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\github\HMH\code\win32_handmade.cpp
_TEXT	SEGMENT
buffer$ = 128
DeviceContext$ = 136
windowWidth$ = 144
windowHeight$ = 152
?Win32DisplayBufferInWindow@@YAXPEAUwin32_offscreen_buffer@@PEAUHDC__@@HH@Z PROC ; Win32DisplayBufferInWindow

; 123  : 						   int windowWidth, int windowHeight){

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 78	 sub	 rsp, 120		; 00000078H

; 124  : 	StretchDIBits(DeviceContext, 

  00018	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR buffer$[rsp]
  00020	c7 44 24 60 20
	00 cc 00	 mov	 DWORD PTR [rsp+96], 13369376 ; 00cc0020H
  00028	c7 44 24 58 00
	00 00 00	 mov	 DWORD PTR [rsp+88], 0
  00030	48 89 44 24 50	 mov	 QWORD PTR [rsp+80], rax
  00035	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR buffer$[rsp]
  0003d	48 8b 40 30	 mov	 rax, QWORD PTR [rax+48]
  00041	48 89 44 24 48	 mov	 QWORD PTR [rsp+72], rax
  00046	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR buffer$[rsp]
  0004e	8b 40 3c	 mov	 eax, DWORD PTR [rax+60]
  00051	89 44 24 40	 mov	 DWORD PTR [rsp+64], eax
  00055	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR buffer$[rsp]
  0005d	8b 40 38	 mov	 eax, DWORD PTR [rax+56]
  00060	89 44 24 38	 mov	 DWORD PTR [rsp+56], eax
  00064	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR [rsp+48], 0
  0006c	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR [rsp+40], 0
  00074	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR windowHeight$[rsp]
  0007b	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0007f	44 8b 8c 24 90
	00 00 00	 mov	 r9d, DWORD PTR windowWidth$[rsp]
  00087	45 33 c0	 xor	 r8d, r8d
  0008a	33 d2		 xor	 edx, edx
  0008c	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR DeviceContext$[rsp]
  00094	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_StretchDIBits

; 125  : 				  /*
; 126  : 				  x, y, width, height,
; 127  : 					  x, y, width, height,*/
; 128  : 				  0, 0, windowWidth, windowHeight,
; 129  : 				  0, 0, buffer->width, buffer->height,
; 130  : 				  buffer->memory,
; 131  : 				  &buffer->info,
; 132  : 				  DIB_RGB_COLORS, SRCCOPY);
; 133  : }

  0009a	48 83 c4 78	 add	 rsp, 120		; 00000078H
  0009e	c3		 ret	 0
?Win32DisplayBufferInWindow@@YAXPEAUwin32_offscreen_buffer@@PEAUHDC__@@HH@Z ENDP ; Win32DisplayBufferInWindow
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\github\HMH\code\win32_handmade.cpp
_TEXT	SEGMENT
BitmapMemorySize$ = 32
buffer$ = 64
width$ = 72
height$ = 80
?Win32ResizeDIBSection@@YAXPEAUwin32_offscreen_buffer@@HH@Z PROC ; Win32ResizeDIBSection

; 94   : Win32ResizeDIBSection(win32_offscreen_buffer* buffer, int width, int height){

  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 95   : 	//free memory if it exists
; 96   : 	if(buffer->memory){

  00012	48 8b 44 24 40	 mov	 rax, QWORD PTR buffer$[rsp]
  00017	48 83 78 30 00	 cmp	 QWORD PTR [rax+48], 0
  0001c	74 17		 je	 SHORT $LN2@Win32Resiz

; 97   : 		VirtualFree(buffer->memory, 0, MEM_RELEASE);

  0001e	41 b8 00 80 00
	00		 mov	 r8d, 32768		; 00008000H
  00024	33 d2		 xor	 edx, edx
  00026	48 8b 44 24 40	 mov	 rax, QWORD PTR buffer$[rsp]
  0002b	48 8b 48 30	 mov	 rcx, QWORD PTR [rax+48]
  0002f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_VirtualFree
$LN2@Win32Resiz:

; 98   : 	}
; 99   : 	
; 100  : 	buffer->width = width;

  00035	48 8b 44 24 40	 mov	 rax, QWORD PTR buffer$[rsp]
  0003a	8b 4c 24 48	 mov	 ecx, DWORD PTR width$[rsp]
  0003e	89 48 38	 mov	 DWORD PTR [rax+56], ecx

; 101  : 	buffer->height = height;

  00041	48 8b 44 24 40	 mov	 rax, QWORD PTR buffer$[rsp]
  00046	8b 4c 24 50	 mov	 ecx, DWORD PTR height$[rsp]
  0004a	89 48 3c	 mov	 DWORD PTR [rax+60], ecx

; 102  : 	buffer->bytesPerPixel = 4;

  0004d	48 8b 44 24 40	 mov	 rax, QWORD PTR buffer$[rsp]
  00052	c7 40 44 04 00
	00 00		 mov	 DWORD PTR [rax+68], 4

; 103  : 	
; 104  : 	//setup bitmap info
; 105  : 	buffer->info.bmiHeader.biSize = sizeof(buffer->info.bmiHeader);

  00059	48 8b 44 24 40	 mov	 rax, QWORD PTR buffer$[rsp]
  0005e	c7 00 28 00 00
	00		 mov	 DWORD PTR [rax], 40	; 00000028H

; 106  : 	buffer->info.bmiHeader.biWidth = buffer->width;

  00064	48 8b 44 24 40	 mov	 rax, QWORD PTR buffer$[rsp]
  00069	48 8b 4c 24 40	 mov	 rcx, QWORD PTR buffer$[rsp]
  0006e	8b 49 38	 mov	 ecx, DWORD PTR [rcx+56]
  00071	89 48 04	 mov	 DWORD PTR [rax+4], ecx

; 107  : 	buffer->info.bmiHeader.biHeight = -buffer->height; //negative to make it top-down

  00074	48 8b 44 24 40	 mov	 rax, QWORD PTR buffer$[rsp]
  00079	8b 40 3c	 mov	 eax, DWORD PTR [rax+60]
  0007c	f7 d8		 neg	 eax
  0007e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR buffer$[rsp]
  00083	89 41 08	 mov	 DWORD PTR [rcx+8], eax

; 108  : 	buffer->info.bmiHeader.biPlanes = 1;

  00086	b8 01 00 00 00	 mov	 eax, 1
  0008b	48 8b 4c 24 40	 mov	 rcx, QWORD PTR buffer$[rsp]
  00090	66 89 41 0c	 mov	 WORD PTR [rcx+12], ax

; 109  : 	buffer->info.bmiHeader.biBitCount = 32;

  00094	b8 20 00 00 00	 mov	 eax, 32			; 00000020H
  00099	48 8b 4c 24 40	 mov	 rcx, QWORD PTR buffer$[rsp]
  0009e	66 89 41 0e	 mov	 WORD PTR [rcx+14], ax

; 110  : 	buffer->info.bmiHeader.biCompression = BI_RGB;

  000a2	48 8b 44 24 40	 mov	 rax, QWORD PTR buffer$[rsp]
  000a7	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [rax+16], 0

; 111  : 	
; 112  : 	//allocate memory
; 113  : 	int BitmapMemorySize = buffer->bytesPerPixel * width * height;

  000ae	48 8b 44 24 40	 mov	 rax, QWORD PTR buffer$[rsp]
  000b3	8b 40 44	 mov	 eax, DWORD PTR [rax+68]
  000b6	0f af 44 24 48	 imul	 eax, DWORD PTR width$[rsp]
  000bb	0f af 44 24 50	 imul	 eax, DWORD PTR height$[rsp]
  000c0	89 44 24 20	 mov	 DWORD PTR BitmapMemorySize$[rsp], eax

; 114  : 	buffer->memory = VirtualAlloc(0, BitmapMemorySize, MEM_COMMIT, PAGE_READWRITE);

  000c4	48 63 44 24 20	 movsxd	 rax, DWORD PTR BitmapMemorySize$[rsp]
  000c9	41 b9 04 00 00
	00		 mov	 r9d, 4
  000cf	41 b8 00 10 00
	00		 mov	 r8d, 4096		; 00001000H
  000d5	48 8b d0	 mov	 rdx, rax
  000d8	33 c9		 xor	 ecx, ecx
  000da	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_VirtualAlloc
  000e0	48 8b 4c 24 40	 mov	 rcx, QWORD PTR buffer$[rsp]
  000e5	48 89 41 30	 mov	 QWORD PTR [rcx+48], rax

; 115  : 	buffer->pitch = buffer->width * buffer->bytesPerPixel;

  000e9	48 8b 44 24 40	 mov	 rax, QWORD PTR buffer$[rsp]
  000ee	48 8b 4c 24 40	 mov	 rcx, QWORD PTR buffer$[rsp]
  000f3	8b 40 38	 mov	 eax, DWORD PTR [rax+56]
  000f6	0f af 41 44	 imul	 eax, DWORD PTR [rcx+68]
  000fa	48 8b 4c 24 40	 mov	 rcx, QWORD PTR buffer$[rsp]
  000ff	89 41 40	 mov	 DWORD PTR [rcx+64], eax

; 116  : 	
; 117  : 	//draw the pixels
; 118  : 	//RenderGradient(0, 0); //TODO remove this possibly
; 119  : }

  00102	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00106	c3		 ret	 0
?Win32ResizeDIBSection@@YAXPEAUwin32_offscreen_buffer@@HH@Z ENDP ; Win32ResizeDIBSection
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\github\HMH\code\win32_handmade.cpp
_TEXT	SEGMENT
g$1 = 0
b$2 = 1
x$3 = 4
y$4 = 8
pixel$5 = 16
row$ = 24
buffer$ = 48
xOffset$ = 56
yOffset$ = 64
?RenderGradient@@YAXPEAUwin32_offscreen_buffer@@HH@Z PROC ; RenderGradient

; 76   : RenderGradient(win32_offscreen_buffer* buffer, int xOffset, int yOffset){

  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 77   : 	uint8* row = (uint8*)buffer->memory;

  00012	48 8b 44 24 30	 mov	 rax, QWORD PTR buffer$[rsp]
  00017	48 8b 40 30	 mov	 rax, QWORD PTR [rax+48]
  0001b	48 89 44 24 18	 mov	 QWORD PTR row$[rsp], rax

; 78   : 	for(int y = 0; y < buffer->height; ++y){

  00020	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR y$4[rsp], 0
  00028	eb 0a		 jmp	 SHORT $LN4@RenderGrad
$LN2@RenderGrad:
  0002a	8b 44 24 08	 mov	 eax, DWORD PTR y$4[rsp]
  0002e	ff c0		 inc	 eax
  00030	89 44 24 08	 mov	 DWORD PTR y$4[rsp], eax
$LN4@RenderGrad:
  00034	48 8b 44 24 30	 mov	 rax, QWORD PTR buffer$[rsp]
  00039	8b 40 3c	 mov	 eax, DWORD PTR [rax+60]
  0003c	39 44 24 08	 cmp	 DWORD PTR y$4[rsp], eax
  00040	0f 8d 8e 00 00
	00		 jge	 $LN3@RenderGrad

; 79   : 		uint32* pixel = (uint32*)row;

  00046	48 8b 44 24 18	 mov	 rax, QWORD PTR row$[rsp]
  0004b	48 89 44 24 10	 mov	 QWORD PTR pixel$5[rsp], rax

; 80   : 		for(int x = 0; x < buffer->width; ++x){

  00050	c7 44 24 04 00
	00 00 00	 mov	 DWORD PTR x$3[rsp], 0
  00058	eb 0a		 jmp	 SHORT $LN7@RenderGrad
$LN5@RenderGrad:
  0005a	8b 44 24 04	 mov	 eax, DWORD PTR x$3[rsp]
  0005e	ff c0		 inc	 eax
  00060	89 44 24 04	 mov	 DWORD PTR x$3[rsp], eax
$LN7@RenderGrad:
  00064	48 8b 44 24 30	 mov	 rax, QWORD PTR buffer$[rsp]
  00069	8b 40 38	 mov	 eax, DWORD PTR [rax+56]
  0006c	39 44 24 04	 cmp	 DWORD PTR x$3[rsp], eax
  00070	7d 44		 jge	 SHORT $LN6@RenderGrad

; 81   : 			//b,g,r,pad     because windows
; 82   : 			uint8 b = (x + xOffset);

  00072	8b 44 24 38	 mov	 eax, DWORD PTR xOffset$[rsp]
  00076	8b 4c 24 04	 mov	 ecx, DWORD PTR x$3[rsp]
  0007a	03 c8		 add	 ecx, eax
  0007c	8b c1		 mov	 eax, ecx
  0007e	88 44 24 01	 mov	 BYTE PTR b$2[rsp], al

; 83   : 			uint8 g = (y + yOffset);

  00082	8b 44 24 40	 mov	 eax, DWORD PTR yOffset$[rsp]
  00086	8b 4c 24 08	 mov	 ecx, DWORD PTR y$4[rsp]
  0008a	03 c8		 add	 ecx, eax
  0008c	8b c1		 mov	 eax, ecx
  0008e	88 04 24	 mov	 BYTE PTR g$1[rsp], al

; 84   : 			//uint8 r = ;
; 85   : 			//uint8 p = ;
; 86   : 			
; 87   : 			*pixel++ = (/*((r << 16) |*/ (g << 8) | b); //shift red and green, increment the pointer

  00091	0f b6 04 24	 movzx	 eax, BYTE PTR g$1[rsp]
  00095	c1 e0 08	 shl	 eax, 8
  00098	0f b6 4c 24 01	 movzx	 ecx, BYTE PTR b$2[rsp]
  0009d	0b c1		 or	 eax, ecx
  0009f	48 8b 4c 24 10	 mov	 rcx, QWORD PTR pixel$5[rsp]
  000a4	89 01		 mov	 DWORD PTR [rcx], eax
  000a6	48 8b 44 24 10	 mov	 rax, QWORD PTR pixel$5[rsp]
  000ab	48 83 c0 04	 add	 rax, 4
  000af	48 89 44 24 10	 mov	 QWORD PTR pixel$5[rsp], rax

; 88   : 		}

  000b4	eb a4		 jmp	 SHORT $LN5@RenderGrad
$LN6@RenderGrad:

; 89   : 		row += buffer->pitch;

  000b6	48 8b 44 24 30	 mov	 rax, QWORD PTR buffer$[rsp]
  000bb	48 63 40 40	 movsxd	 rax, DWORD PTR [rax+64]
  000bf	48 8b 4c 24 18	 mov	 rcx, QWORD PTR row$[rsp]
  000c4	48 03 c8	 add	 rcx, rax
  000c7	48 8b c1	 mov	 rax, rcx
  000ca	48 89 44 24 18	 mov	 QWORD PTR row$[rsp], rax

; 90   : 	}

  000cf	e9 56 ff ff ff	 jmp	 $LN2@RenderGrad
$LN3@RenderGrad:

; 91   : }

  000d4	48 83 c4 28	 add	 rsp, 40			; 00000028H
  000d8	c3		 ret	 0
?RenderGradient@@YAXPEAUwin32_offscreen_buffer@@HH@Z ENDP ; RenderGradient
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\github\HMH\code\win32_handmade.cpp
_TEXT	SEGMENT
result$ = 32
ClientRect$ = 40
__$ArrayPad$ = 56
Window$ = 80
?Win32GetWindowDimensions@@YA?AUwin32_window_dimensions@@PEAUHWND__@@@Z PROC ; Win32GetWindowDimensions

; 64   : Win32GetWindowDimensions(HWND Window){

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H
  00009	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00010	48 33 c4	 xor	 rax, rsp
  00013	48 89 44 24 38	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 65   : 	win32_window_dimensions result;
; 66   : 	
; 67   : 	RECT ClientRect;
; 68   : 	GetClientRect(Window, &ClientRect);

  00018	48 8d 54 24 28	 lea	 rdx, QWORD PTR ClientRect$[rsp]
  0001d	48 8b 4c 24 50	 mov	 rcx, QWORD PTR Window$[rsp]
  00022	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetClientRect

; 69   : 	result.height = ClientRect.bottom - ClientRect.top;

  00028	8b 44 24 2c	 mov	 eax, DWORD PTR ClientRect$[rsp+4]
  0002c	8b 4c 24 34	 mov	 ecx, DWORD PTR ClientRect$[rsp+12]
  00030	2b c8		 sub	 ecx, eax
  00032	8b c1		 mov	 eax, ecx
  00034	89 44 24 24	 mov	 DWORD PTR result$[rsp+4], eax

; 70   : 	result.width = ClientRect.right - ClientRect.left;

  00038	8b 44 24 28	 mov	 eax, DWORD PTR ClientRect$[rsp]
  0003c	8b 4c 24 30	 mov	 ecx, DWORD PTR ClientRect$[rsp+8]
  00040	2b c8		 sub	 ecx, eax
  00042	8b c1		 mov	 eax, ecx
  00044	89 44 24 20	 mov	 DWORD PTR result$[rsp], eax

; 71   : 	
; 72   : 	return result;

  00048	48 8b 44 24 20	 mov	 rax, QWORD PTR result$[rsp]

; 73   : }

  0004d	48 8b 4c 24 38	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00052	48 33 cc	 xor	 rcx, rsp
  00055	e8 00 00 00 00	 call	 __security_check_cookie
  0005a	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0005e	c3		 ret	 0
?Win32GetWindowDimensions@@YA?AUwin32_window_dimensions@@PEAUHWND__@@@Z ENDP ; Win32GetWindowDimensions
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\github\HMH\code\win32_handmade.cpp
_TEXT	SEGMENT
XInputLibrary$ = 32
?Win32LoadXInput@@YAXXZ PROC				; Win32LoadXInput

; 55   : Win32LoadXInput(){

  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 56   : 	HMODULE XInputLibrary =  LoadLibraryA("xinput1_3.dll");

  00004	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG90438
  0000b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_LoadLibraryA
  00011	48 89 44 24 20	 mov	 QWORD PTR XInputLibrary$[rsp], rax

; 57   : 	if(XInputLibrary){

  00016	48 83 7c 24 20
	00		 cmp	 QWORD PTR XInputLibrary$[rsp], 0
  0001c	74 32		 je	 SHORT $LN2@Win32LoadX

; 58   : 		XInputGetState = (x_input_get_state*)GetProcAddress(XInputLibrary, "XInputGetState");

  0001e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG90440
  00025	48 8b 4c 24 20	 mov	 rcx, QWORD PTR XInputLibrary$[rsp]
  0002a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetProcAddress
  00030	48 89 05 00 00
	00 00		 mov	 QWORD PTR ?XInputGetState_@@3P6AKKPEAU_XINPUT_STATE@@@ZEA, rax

; 59   : 		XInputSetState = (x_input_set_state*)GetProcAddress(XInputLibrary, "XInputSetState");

  00037	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG90441
  0003e	48 8b 4c 24 20	 mov	 rcx, QWORD PTR XInputLibrary$[rsp]
  00043	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetProcAddress
  00049	48 89 05 00 00
	00 00		 mov	 QWORD PTR ?XInputSetState_@@3P6AKKPEAU_XINPUT_VIBRATION@@@ZEA, rax
$LN2@Win32LoadX:

; 60   : 	}
; 61   : }

  00050	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00054	c3		 ret	 0
?Win32LoadXInput@@YAXXZ ENDP				; Win32LoadXInput
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\github\HMH\code\win32_handmade.cpp
_TEXT	SEGMENT
dwUserIndex$ = 8
pState$ = 16
?XInputSetStateStub@@YAKKPEAU_XINPUT_VIBRATION@@@Z PROC	; XInputSetStateStub

; 50   : X_INPUT_SET_STATE(XInputSetStateStub){return 0;}

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00009	33 c0		 xor	 eax, eax
  0000b	c3		 ret	 0
?XInputSetStateStub@@YAKKPEAU_XINPUT_VIBRATION@@@Z ENDP	; XInputSetStateStub
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\github\HMH\code\win32_handmade.cpp
_TEXT	SEGMENT
dwUserIndex$ = 8
pState$ = 16
?XInputGetStateStub@@YAKKPEAU_XINPUT_STATE@@@Z PROC	; XInputGetStateStub

; 43   : X_INPUT_GET_STATE(XInputGetStateStub){return 0;}

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00009	33 c0		 xor	 eax, eax
  0000b	c3		 ret	 0
?XInputGetStateStub@@YAKKPEAU_XINPUT_STATE@@@Z ENDP	; XInputGetStateStub
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\github\HMH\code\win32_handmade.cpp
_TEXT	SEGMENT
tv147 = 96
tv152 = 97
tv157 = 98
tv162 = 99
tv167 = 100
tv172 = 101
tv177 = 102
tv182 = 103
tv187 = 104
tv224 = 105
tv229 = 106
aButton$1 = 107
pad$2 = 112
controllerIndex$3 = 120
left$4 = 124
right$5 = 125
start$6 = 126
back$7 = 127
lShoulder$8 = 128
rShoulder$9 = 129
bButton$10 = 130
xButton$11 = 131
yButton$12 = 132
up$13 = 133
yOffset$14 = 136
xOffset$15 = 140
down$16 = 144
Window$17 = 152
stickX$18 = 160
stickY$19 = 164
dimensions$20 = 168
DeviceContext$21 = 176
$T22 = 184
WindowClass$ = 192
Message$23 = 272
controllerState$24 = 320
__$ArrayPad$ = 336
Instance$ = 368
PrevInstance$ = 376
CommandLine$ = 384
ShowCode$ = 392
WinMain	PROC

; 213  : WinMain(HINSTANCE Instance, HINSTANCE PrevInstance, LPSTR CommandLine, int ShowCode){

$LN40:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	57		 push	 rdi
  00015	48 81 ec 60 01
	00 00		 sub	 rsp, 352		; 00000160H
  0001c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00023	48 33 c4	 xor	 rax, rsp
  00026	48 89 84 24 50
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 214  : 	Win32LoadXInput();

  0002e	e8 00 00 00 00	 call	 ?Win32LoadXInput@@YAXXZ	; Win32LoadXInput

; 215  : 	
; 216  :     WNDCLASSA WindowClass = {};

  00033	48 8d 84 24 c0
	00 00 00	 lea	 rax, QWORD PTR WindowClass$[rsp]
  0003b	48 8b f8	 mov	 rdi, rax
  0003e	33 c0		 xor	 eax, eax
  00040	b9 48 00 00 00	 mov	 ecx, 72			; 00000048H
  00045	f3 aa		 rep stosb

; 217  : 	
; 218  : 	Win32ResizeDIBSection(&GlobalBackbuffer, 1280, 720);

  00047	41 b8 d0 02 00
	00		 mov	 r8d, 720		; 000002d0H
  0004d	ba 00 05 00 00	 mov	 edx, 1280		; 00000500H
  00052	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?GlobalBackbuffer@@3Uwin32_offscreen_buffer@@A
  00059	e8 00 00 00 00	 call	 ?Win32ResizeDIBSection@@YAXPEAUwin32_offscreen_buffer@@HH@Z ; Win32ResizeDIBSection

; 219  : 	
; 220  : 	WindowClass.style = CS_HREDRAW|CS_VREDRAW;

  0005e	c7 84 24 c0 00
	00 00 03 00 00
	00		 mov	 DWORD PTR WindowClass$[rsp], 3

; 221  : 	WindowClass.lpfnWndProc = Win32MainWindowCallback;

  00069	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?Win32MainWindowCallback@@YA_JPEAUHWND__@@I_K_J@Z ; Win32MainWindowCallback
  00070	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR WindowClass$[rsp+8], rax

; 222  : 	WindowClass.hInstance = Instance;

  00078	48 8b 84 24 70
	01 00 00	 mov	 rax, QWORD PTR Instance$[rsp]
  00080	48 89 84 24 d8
	00 00 00	 mov	 QWORD PTR WindowClass$[rsp+24], rax

; 223  : 	//WindowClass.hIcon;
; 224  : 	WindowClass.lpszClassName = "HandmadeHeroWindowClass";

  00088	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG90569
  0008f	48 89 84 24 00
	01 00 00	 mov	 QWORD PTR WindowClass$[rsp+64], rax

; 225  : 	
; 226  : 	if(RegisterClassA(&WindowClass)){

  00097	48 8d 8c 24 c0
	00 00 00	 lea	 rcx, QWORD PTR WindowClass$[rsp]
  0009f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_RegisterClassA
  000a5	0f b7 c0	 movzx	 eax, ax
  000a8	85 c0		 test	 eax, eax
  000aa	0f 84 e1 03 00
	00		 je	 $LN9@WinMain

; 227  : 		HWND Window = CreateWindowExA(0, WindowClass.lpszClassName,

  000b0	48 c7 44 24 58
	00 00 00 00	 mov	 QWORD PTR [rsp+88], 0
  000b9	48 8b 84 24 70
	01 00 00	 mov	 rax, QWORD PTR Instance$[rsp]
  000c1	48 89 44 24 50	 mov	 QWORD PTR [rsp+80], rax
  000c6	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR [rsp+72], 0
  000cf	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR [rsp+64], 0
  000d8	c7 44 24 38 00
	00 00 80	 mov	 DWORD PTR [rsp+56], -2147483648 ; ffffffff80000000H
  000e0	c7 44 24 30 00
	00 00 80	 mov	 DWORD PTR [rsp+48], -2147483648 ; ffffffff80000000H
  000e8	c7 44 24 28 00
	00 00 80	 mov	 DWORD PTR [rsp+40], -2147483648 ; ffffffff80000000H
  000f0	c7 44 24 20 00
	00 00 80	 mov	 DWORD PTR [rsp+32], -2147483648 ; ffffffff80000000H
  000f8	41 b9 00 00 cf
	10		 mov	 r9d, 282001408		; 10cf0000H
  000fe	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG90572
  00105	48 8b 94 24 00
	01 00 00	 mov	 rdx, QWORD PTR WindowClass$[rsp+64]
  0010d	33 c9		 xor	 ecx, ecx
  0010f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CreateWindowExA
  00115	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR Window$17[rsp], rax

; 228  : 									  "HandmadeHeroWindowClass",
; 229  : 									  WS_OVERLAPPEDWINDOW|WS_VISIBLE,
; 230  : 									  CW_USEDEFAULT, CW_USEDEFAULT,
; 231  : 									  CW_USEDEFAULT, CW_USEDEFAULT,
; 232  : 									  0, 0, Instance, 0);
; 233  : 		//get a message when there is one, keep going otherwise
; 234  : 		if(Window){

  0011d	48 83 bc 24 98
	00 00 00 00	 cmp	 QWORD PTR Window$17[rsp], 0
  00126	0f 84 65 03 00
	00		 je	 $LN11@WinMain

; 235  : 			GlobalRunning = true;

  0012c	c6 05 00 00 00
	00 01		 mov	 BYTE PTR ?GlobalRunning@@3_NA, 1

; 236  : 			int xOffset = 0;

  00133	c7 84 24 8c 00
	00 00 00 00 00
	00		 mov	 DWORD PTR xOffset$15[rsp], 0

; 237  : 			int yOffset = 0;

  0013e	c7 84 24 88 00
	00 00 00 00 00
	00		 mov	 DWORD PTR yOffset$14[rsp], 0
$LN2@WinMain:

; 238  : 			
; 239  : 			while(GlobalRunning){

  00149	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?GlobalRunning@@3_NA
  00150	85 c0		 test	 eax, eax
  00152	0f 84 39 03 00
	00		 je	 $LN3@WinMain
$LN4@WinMain:

; 240  : 				MSG Message;
; 241  : 				
; 242  : 				while(PeekMessage(&Message, 0, 0, 0, PM_REMOVE)){

  00158	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR [rsp+32], 1
  00160	45 33 c9	 xor	 r9d, r9d
  00163	45 33 c0	 xor	 r8d, r8d
  00166	33 d2		 xor	 edx, edx
  00168	48 8d 8c 24 10
	01 00 00	 lea	 rcx, QWORD PTR Message$23[rsp]
  00170	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_PeekMessageA
  00176	85 c0		 test	 eax, eax
  00178	74 2f		 je	 SHORT $LN5@WinMain

; 243  : 					if(Message.message == WM_QUIT){

  0017a	83 bc 24 18 01
	00 00 12	 cmp	 DWORD PTR Message$23[rsp+8], 18
  00182	75 07		 jne	 SHORT $LN13@WinMain

; 244  : 						GlobalRunning = false;

  00184	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?GlobalRunning@@3_NA, 0
$LN13@WinMain:

; 245  : 					}
; 246  : 					
; 247  : 					TranslateMessage(&Message);

  0018b	48 8d 8c 24 10
	01 00 00	 lea	 rcx, QWORD PTR Message$23[rsp]
  00193	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_TranslateMessage

; 248  : 					DispatchMessageA(&Message);

  00199	48 8d 8c 24 10
	01 00 00	 lea	 rcx, QWORD PTR Message$23[rsp]
  001a1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_DispatchMessageA

; 249  : 				}

  001a7	eb af		 jmp	 SHORT $LN4@WinMain
$LN5@WinMain:

; 250  : 				//input
; 251  : 				for(DWORD controllerIndex = 0; controllerIndex < XUSER_MAX_COUNT; ++controllerIndex){

  001a9	c7 44 24 78 00
	00 00 00	 mov	 DWORD PTR controllerIndex$3[rsp], 0
  001b1	eb 0a		 jmp	 SHORT $LN8@WinMain
$LN6@WinMain:
  001b3	8b 44 24 78	 mov	 eax, DWORD PTR controllerIndex$3[rsp]
  001b7	ff c0		 inc	 eax
  001b9	89 44 24 78	 mov	 DWORD PTR controllerIndex$3[rsp], eax
$LN8@WinMain:
  001bd	83 7c 24 78 04	 cmp	 DWORD PTR controllerIndex$3[rsp], 4
  001c2	0f 83 24 02 00
	00		 jae	 $LN7@WinMain

; 252  : 					XINPUT_STATE controllerState;
; 253  : 					if(XInputGetState(controllerIndex, &controllerState) == ERROR_SUCCESS){

  001c8	48 8d 94 24 40
	01 00 00	 lea	 rdx, QWORD PTR controllerState$24[rsp]
  001d0	8b 4c 24 78	 mov	 ecx, DWORD PTR controllerIndex$3[rsp]
  001d4	ff 15 00 00 00
	00		 call	 QWORD PTR ?XInputGetState_@@3P6AKKPEAU_XINPUT_STATE@@@ZEA
  001da	85 c0		 test	 eax, eax
  001dc	0f 85 05 02 00
	00		 jne	 $LN14@WinMain

; 254  : 						//controller plugged in
; 255  : 						XINPUT_GAMEPAD* pad = &controllerState.Gamepad;

  001e2	48 8d 84 24 44
	01 00 00	 lea	 rax, QWORD PTR controllerState$24[rsp+4]
  001ea	48 89 44 24 70	 mov	 QWORD PTR pad$2[rsp], rax

; 256  : 						
; 257  : 						bool up = (pad->wButtons & XINPUT_GAMEPAD_DPAD_UP);

  001ef	48 8b 44 24 70	 mov	 rax, QWORD PTR pad$2[rsp]
  001f4	0f b7 00	 movzx	 eax, WORD PTR [rax]
  001f7	83 e0 01	 and	 eax, 1
  001fa	88 84 24 85 00
	00 00		 mov	 BYTE PTR up$13[rsp], al

; 258  : 						bool down = (pad->wButtons & XINPUT_GAMEPAD_DPAD_DOWN);

  00201	48 8b 44 24 70	 mov	 rax, QWORD PTR pad$2[rsp]
  00206	0f b7 00	 movzx	 eax, WORD PTR [rax]
  00209	83 e0 02	 and	 eax, 2
  0020c	85 c0		 test	 eax, eax
  0020e	74 07		 je	 SHORT $LN18@WinMain
  00210	c6 44 24 60 01	 mov	 BYTE PTR tv147[rsp], 1
  00215	eb 05		 jmp	 SHORT $LN19@WinMain
$LN18@WinMain:
  00217	c6 44 24 60 00	 mov	 BYTE PTR tv147[rsp], 0
$LN19@WinMain:
  0021c	0f b6 44 24 60	 movzx	 eax, BYTE PTR tv147[rsp]
  00221	88 84 24 90 00
	00 00		 mov	 BYTE PTR down$16[rsp], al

; 259  : 						bool left = (pad->wButtons & XINPUT_GAMEPAD_DPAD_LEFT);

  00228	48 8b 44 24 70	 mov	 rax, QWORD PTR pad$2[rsp]
  0022d	0f b7 00	 movzx	 eax, WORD PTR [rax]
  00230	83 e0 04	 and	 eax, 4
  00233	85 c0		 test	 eax, eax
  00235	74 07		 je	 SHORT $LN20@WinMain
  00237	c6 44 24 61 01	 mov	 BYTE PTR tv152[rsp], 1
  0023c	eb 05		 jmp	 SHORT $LN21@WinMain
$LN20@WinMain:
  0023e	c6 44 24 61 00	 mov	 BYTE PTR tv152[rsp], 0
$LN21@WinMain:
  00243	0f b6 44 24 61	 movzx	 eax, BYTE PTR tv152[rsp]
  00248	88 44 24 7c	 mov	 BYTE PTR left$4[rsp], al

; 260  : 						bool right = (pad->wButtons & XINPUT_GAMEPAD_DPAD_RIGHT);

  0024c	48 8b 44 24 70	 mov	 rax, QWORD PTR pad$2[rsp]
  00251	0f b7 00	 movzx	 eax, WORD PTR [rax]
  00254	83 e0 08	 and	 eax, 8
  00257	85 c0		 test	 eax, eax
  00259	74 07		 je	 SHORT $LN22@WinMain
  0025b	c6 44 24 62 01	 mov	 BYTE PTR tv157[rsp], 1
  00260	eb 05		 jmp	 SHORT $LN23@WinMain
$LN22@WinMain:
  00262	c6 44 24 62 00	 mov	 BYTE PTR tv157[rsp], 0
$LN23@WinMain:
  00267	0f b6 44 24 62	 movzx	 eax, BYTE PTR tv157[rsp]
  0026c	88 44 24 7d	 mov	 BYTE PTR right$5[rsp], al

; 261  : 						bool start = (pad->wButtons & XINPUT_GAMEPAD_START);

  00270	48 8b 44 24 70	 mov	 rax, QWORD PTR pad$2[rsp]
  00275	0f b7 00	 movzx	 eax, WORD PTR [rax]
  00278	83 e0 10	 and	 eax, 16
  0027b	85 c0		 test	 eax, eax
  0027d	74 07		 je	 SHORT $LN24@WinMain
  0027f	c6 44 24 63 01	 mov	 BYTE PTR tv162[rsp], 1
  00284	eb 05		 jmp	 SHORT $LN25@WinMain
$LN24@WinMain:
  00286	c6 44 24 63 00	 mov	 BYTE PTR tv162[rsp], 0
$LN25@WinMain:
  0028b	0f b6 44 24 63	 movzx	 eax, BYTE PTR tv162[rsp]
  00290	88 44 24 7e	 mov	 BYTE PTR start$6[rsp], al

; 262  : 						bool back = (pad->wButtons & XINPUT_GAMEPAD_BACK);

  00294	48 8b 44 24 70	 mov	 rax, QWORD PTR pad$2[rsp]
  00299	0f b7 00	 movzx	 eax, WORD PTR [rax]
  0029c	83 e0 20	 and	 eax, 32			; 00000020H
  0029f	85 c0		 test	 eax, eax
  002a1	74 07		 je	 SHORT $LN26@WinMain
  002a3	c6 44 24 64 01	 mov	 BYTE PTR tv167[rsp], 1
  002a8	eb 05		 jmp	 SHORT $LN27@WinMain
$LN26@WinMain:
  002aa	c6 44 24 64 00	 mov	 BYTE PTR tv167[rsp], 0
$LN27@WinMain:
  002af	0f b6 44 24 64	 movzx	 eax, BYTE PTR tv167[rsp]
  002b4	88 44 24 7f	 mov	 BYTE PTR back$7[rsp], al

; 263  : 						bool lShoulder = (pad->wButtons & XINPUT_GAMEPAD_LEFT_SHOULDER);

  002b8	48 8b 44 24 70	 mov	 rax, QWORD PTR pad$2[rsp]
  002bd	0f b7 00	 movzx	 eax, WORD PTR [rax]
  002c0	25 00 01 00 00	 and	 eax, 256		; 00000100H
  002c5	85 c0		 test	 eax, eax
  002c7	74 07		 je	 SHORT $LN28@WinMain
  002c9	c6 44 24 65 01	 mov	 BYTE PTR tv172[rsp], 1
  002ce	eb 05		 jmp	 SHORT $LN29@WinMain
$LN28@WinMain:
  002d0	c6 44 24 65 00	 mov	 BYTE PTR tv172[rsp], 0
$LN29@WinMain:
  002d5	0f b6 44 24 65	 movzx	 eax, BYTE PTR tv172[rsp]
  002da	88 84 24 80 00
	00 00		 mov	 BYTE PTR lShoulder$8[rsp], al

; 264  : 						bool rShoulder = (pad->wButtons & XINPUT_GAMEPAD_RIGHT_SHOULDER);

  002e1	48 8b 44 24 70	 mov	 rax, QWORD PTR pad$2[rsp]
  002e6	0f b7 00	 movzx	 eax, WORD PTR [rax]
  002e9	25 00 02 00 00	 and	 eax, 512		; 00000200H
  002ee	85 c0		 test	 eax, eax
  002f0	74 07		 je	 SHORT $LN30@WinMain
  002f2	c6 44 24 66 01	 mov	 BYTE PTR tv177[rsp], 1
  002f7	eb 05		 jmp	 SHORT $LN31@WinMain
$LN30@WinMain:
  002f9	c6 44 24 66 00	 mov	 BYTE PTR tv177[rsp], 0
$LN31@WinMain:
  002fe	0f b6 44 24 66	 movzx	 eax, BYTE PTR tv177[rsp]
  00303	88 84 24 81 00
	00 00		 mov	 BYTE PTR rShoulder$9[rsp], al

; 265  : 						bool aButton = (pad->wButtons & XINPUT_GAMEPAD_A);

  0030a	48 8b 44 24 70	 mov	 rax, QWORD PTR pad$2[rsp]
  0030f	0f b7 00	 movzx	 eax, WORD PTR [rax]
  00312	25 00 10 00 00	 and	 eax, 4096		; 00001000H
  00317	85 c0		 test	 eax, eax
  00319	74 07		 je	 SHORT $LN32@WinMain
  0031b	c6 44 24 67 01	 mov	 BYTE PTR tv182[rsp], 1
  00320	eb 05		 jmp	 SHORT $LN33@WinMain
$LN32@WinMain:
  00322	c6 44 24 67 00	 mov	 BYTE PTR tv182[rsp], 0
$LN33@WinMain:
  00327	0f b6 44 24 67	 movzx	 eax, BYTE PTR tv182[rsp]
  0032c	88 44 24 6b	 mov	 BYTE PTR aButton$1[rsp], al

; 266  : 						bool bButton = (pad->wButtons & XINPUT_GAMEPAD_B);

  00330	48 8b 44 24 70	 mov	 rax, QWORD PTR pad$2[rsp]
  00335	0f b7 00	 movzx	 eax, WORD PTR [rax]
  00338	25 00 20 00 00	 and	 eax, 8192		; 00002000H
  0033d	85 c0		 test	 eax, eax
  0033f	74 07		 je	 SHORT $LN34@WinMain
  00341	c6 44 24 68 01	 mov	 BYTE PTR tv187[rsp], 1
  00346	eb 05		 jmp	 SHORT $LN35@WinMain
$LN34@WinMain:
  00348	c6 44 24 68 00	 mov	 BYTE PTR tv187[rsp], 0
$LN35@WinMain:
  0034d	0f b6 44 24 68	 movzx	 eax, BYTE PTR tv187[rsp]
  00352	88 84 24 82 00
	00 00		 mov	 BYTE PTR bButton$10[rsp], al

; 267  : 						bool xButton = (pad->wButtons & XINPUT_GAMEPAD_X);

  00359	48 8b 44 24 70	 mov	 rax, QWORD PTR pad$2[rsp]
  0035e	0f b7 00	 movzx	 eax, WORD PTR [rax]
  00361	25 00 40 00 00	 and	 eax, 16384		; 00004000H
  00366	85 c0		 test	 eax, eax
  00368	74 07		 je	 SHORT $LN36@WinMain
  0036a	c6 44 24 69 01	 mov	 BYTE PTR tv224[rsp], 1
  0036f	eb 05		 jmp	 SHORT $LN37@WinMain
$LN36@WinMain:
  00371	c6 44 24 69 00	 mov	 BYTE PTR tv224[rsp], 0
$LN37@WinMain:
  00376	0f b6 44 24 69	 movzx	 eax, BYTE PTR tv224[rsp]
  0037b	88 84 24 83 00
	00 00		 mov	 BYTE PTR xButton$11[rsp], al

; 268  : 						bool yButton = (pad->wButtons & XINPUT_GAMEPAD_Y);

  00382	48 8b 44 24 70	 mov	 rax, QWORD PTR pad$2[rsp]
  00387	0f b7 00	 movzx	 eax, WORD PTR [rax]
  0038a	25 00 80 00 00	 and	 eax, 32768		; 00008000H
  0038f	85 c0		 test	 eax, eax
  00391	74 07		 je	 SHORT $LN38@WinMain
  00393	c6 44 24 6a 01	 mov	 BYTE PTR tv229[rsp], 1
  00398	eb 05		 jmp	 SHORT $LN39@WinMain
$LN38@WinMain:
  0039a	c6 44 24 6a 00	 mov	 BYTE PTR tv229[rsp], 0
$LN39@WinMain:
  0039f	0f b6 44 24 6a	 movzx	 eax, BYTE PTR tv229[rsp]
  003a4	88 84 24 84 00
	00 00		 mov	 BYTE PTR yButton$12[rsp], al

; 269  : 						
; 270  : 						int16 stickX = pad->sThumbLX; 

  003ab	48 8b 44 24 70	 mov	 rax, QWORD PTR pad$2[rsp]
  003b0	0f b7 40 04	 movzx	 eax, WORD PTR [rax+4]
  003b4	66 89 84 24 a0
	00 00 00	 mov	 WORD PTR stickX$18[rsp], ax

; 271  : 						int16 stickY = pad->sThumbLY; 

  003bc	48 8b 44 24 70	 mov	 rax, QWORD PTR pad$2[rsp]
  003c1	0f b7 40 06	 movzx	 eax, WORD PTR [rax+6]
  003c5	66 89 84 24 a4
	00 00 00	 mov	 WORD PTR stickY$19[rsp], ax

; 272  : 						
; 273  : 						if(aButton){

  003cd	0f b6 44 24 6b	 movzx	 eax, BYTE PTR aButton$1[rsp]
  003d2	85 c0		 test	 eax, eax
  003d4	74 11		 je	 SHORT $LN16@WinMain

; 274  : 							yOffset += 2;

  003d6	8b 84 24 88 00
	00 00		 mov	 eax, DWORD PTR yOffset$14[rsp]
  003dd	83 c0 02	 add	 eax, 2
  003e0	89 84 24 88 00
	00 00		 mov	 DWORD PTR yOffset$14[rsp], eax
$LN16@WinMain:
$LN14@WinMain:

; 275  : 						}
; 276  : 					}else{
; 277  : 						//contoller not available
; 278  : 						
; 279  : 					}
; 280  : 				}

  003e7	e9 c7 fd ff ff	 jmp	 $LN6@WinMain
$LN7@WinMain:

; 281  : 				//controller rumble
; 282  : 				//XINPUT_VIBRATION vibration;
; 283  : 				//vibration.wLeftMotorSpeed = 60000;
; 284  : 				//vibration.wRightMotorSpeed = 60000;
; 285  : 				//XInputSetState(0, &vibration);
; 286  : 				
; 287  : 				
; 288  : 				
; 289  : 				//render
; 290  : 				RenderGradient(&GlobalBackbuffer, xOffset, yOffset);

  003ec	44 8b 84 24 88
	00 00 00	 mov	 r8d, DWORD PTR yOffset$14[rsp]
  003f4	8b 94 24 8c 00
	00 00		 mov	 edx, DWORD PTR xOffset$15[rsp]
  003fb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?GlobalBackbuffer@@3Uwin32_offscreen_buffer@@A
  00402	e8 00 00 00 00	 call	 ?RenderGradient@@YAXPEAUwin32_offscreen_buffer@@HH@Z ; RenderGradient

; 291  : 				HDC DeviceContext = GetDC(Window);

  00407	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR Window$17[rsp]
  0040f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetDC
  00415	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR DeviceContext$21[rsp], rax

; 292  : 				//draw window
; 293  : 				win32_window_dimensions dimensions = Win32GetWindowDimensions(Window);

  0041d	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR Window$17[rsp]
  00425	e8 00 00 00 00	 call	 ?Win32GetWindowDimensions@@YA?AUwin32_window_dimensions@@PEAUHWND__@@@Z ; Win32GetWindowDimensions
  0042a	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR $T22[rsp], rax
  00432	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR $T22[rsp]
  0043a	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR dimensions$20[rsp], rax

; 294  : 				Win32DisplayBufferInWindow(&GlobalBackbuffer, DeviceContext, 

  00442	44 8b 8c 24 ac
	00 00 00	 mov	 r9d, DWORD PTR dimensions$20[rsp+4]
  0044a	44 8b 84 24 a8
	00 00 00	 mov	 r8d, DWORD PTR dimensions$20[rsp]
  00452	48 8b 94 24 b0
	00 00 00	 mov	 rdx, QWORD PTR DeviceContext$21[rsp]
  0045a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?GlobalBackbuffer@@3Uwin32_offscreen_buffer@@A
  00461	e8 00 00 00 00	 call	 ?Win32DisplayBufferInWindow@@YAXPEAUwin32_offscreen_buffer@@PEAUHDC__@@HH@Z ; Win32DisplayBufferInWindow

; 295  : 										   dimensions.width, dimensions.height);
; 296  : 				ReleaseDC(Window, DeviceContext);

  00466	48 8b 94 24 b0
	00 00 00	 mov	 rdx, QWORD PTR DeviceContext$21[rsp]
  0046e	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR Window$17[rsp]
  00476	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ReleaseDC

; 297  : 				
; 298  : 				++xOffset;

  0047c	8b 84 24 8c 00
	00 00		 mov	 eax, DWORD PTR xOffset$15[rsp]
  00483	ff c0		 inc	 eax
  00485	89 84 24 8c 00
	00 00		 mov	 DWORD PTR xOffset$15[rsp], eax

; 299  : 			}

  0048c	e9 b8 fc ff ff	 jmp	 $LN2@WinMain
$LN3@WinMain:
$LN11@WinMain:
$LN9@WinMain:

; 300  : 		}else{
; 301  : 			//TODO logging 
; 302  : 		}
; 303  : 	}else{
; 304  : 		//TODO logging 
; 305  : 	}
; 306  : 	return 0;

  00491	33 c0		 xor	 eax, eax

; 307  : }

  00493	48 8b 8c 24 50
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  0049b	48 33 cc	 xor	 rcx, rsp
  0049e	e8 00 00 00 00	 call	 __security_check_cookie
  004a3	48 81 c4 60 01
	00 00		 add	 rsp, 352		; 00000160H
  004aa	5f		 pop	 rdi
  004ab	c3		 ret	 0
WinMain	ENDP
_TEXT	ENDS
END
